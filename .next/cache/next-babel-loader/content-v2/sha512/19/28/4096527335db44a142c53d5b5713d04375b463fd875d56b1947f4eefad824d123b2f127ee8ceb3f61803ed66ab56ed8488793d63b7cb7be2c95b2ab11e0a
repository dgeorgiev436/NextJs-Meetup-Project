{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/workspace/React/NextJs/CodeAlongProject/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport { useRouter } from \"next/router\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient } from \"mongodb\";\n\nconst MeetupDetails = () => {\n  const router = useRouter();\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    img: \"https://images.unsplash.com/photo-1567437040310-90608ece8ff0?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8bmljZSUyMHBsYWNlc3xlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\",\n    title: \"First meetup\",\n    address: \"1 drove street\",\n    description: \"This is our first meeting\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}; // Tell next.js for which dynamic parameter values the page should be pre-generated\n\n\nexport const getStaticPaths = async () => {\n  return {\n    fallback: false,\n    paths: [{\n      params: {\n        meetupId: \"m1\"\n      }\n    }, {\n      params: {\n        meetupId: \"m2\"\n      }\n    }]\n  };\n}; // Returns props for specific meetup\n\nexport const getStaticProps = async context => {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://Admin:hesoyam@cluster0.eykfx.mongodb.net/MeetupsProject?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const res = await meetupCollection.find({\n    id: meetupId\n  });\n  console.log(res); // \tRuns on server side\n\n  console.log(meetupId);\n  return {\n    props: {\n      meetupData: res\n    }\n  };\n};\nexport default MeetupDetails;","map":{"version":3,"sources":["/workspace/React/NextJs/CodeAlongProject/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["useRouter","Fragment","MeetupDetail","MongoClient","MeetupDetails","router","getStaticPaths","fallback","paths","params","meetupId","getStaticProps","context","client","connect","db","meetupCollection","collection","res","find","id","console","log","props","meetupData"],"mappings":";;AAAA,SAAQA,SAAR,QAAwB,aAAxB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,SAAQC,WAAR,QAA0B,SAA1B;;AAGA,MAAMC,aAAa,GAAG,MAAM;AACxB,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AAEA,sBACI,QAAC,YAAD;AACI,IAAA,GAAG,EAAG,iLADV;AAEI,IAAA,KAAK,EAAG,cAFZ;AAGI,IAAA,OAAO,EAAG,gBAHd;AAII,IAAA,WAAW,EAAG;AAJlB;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAXD,C,CAcA;;;AACA,OAAO,MAAMM,cAAc,GAAG,YAAW;AACxC,SAAO;AACNC,IAAAA,QAAQ,EAAE,KADJ;AAENC,IAAAA,KAAK,EAAE,CACN;AACCC,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAE;AAAX;AADT,KADM,EAIN;AACCD,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAE;AAAX;AADT,KAJM;AAFD,GAAP;AAWA,CAZM,C,CAeP;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAMC,OAAN,IAAkB;AAC/C,QAAMF,QAAQ,GAAGE,OAAO,CAACH,MAAR,CAAeC,QAAhC;AAEA,QAAMG,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,mGAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAzB;AAEA,QAAMC,GAAG,GAAG,MAAMF,gBAAgB,CAACG,IAAjB,CAAsB;AAACC,IAAAA,EAAE,EAAEV;AAAL,GAAtB,CAAlB;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,EAR+C,CAWhD;;AACCG,EAAAA,OAAO,CAACC,GAAR,CAAYZ,QAAZ;AAEA,SAAO;AACNa,IAAAA,KAAK,EAAE;AACNC,MAAAA,UAAU,EAAEN;AADN;AADD,GAAP;AAKA,CAnBM;AAqBP,eAAed,aAAf","sourcesContent":["import {useRouter} from \"next/router\"\nimport {Fragment} from \"react\"\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\"\nimport {MongoClient} from \"mongodb\"\n\n\nconst MeetupDetails = () => {\n    const router = useRouter();\n\n    return(\n        <MeetupDetail \n            img = \"https://images.unsplash.com/photo-1567437040310-90608ece8ff0?ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8bmljZSUyMHBsYWNlc3xlbnwwfHwwfHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60\"\n            title = \"First meetup\"\n            address = \"1 drove street\"\n            description = \"This is our first meeting\"\n        />\n    )\n}\n\n\n// Tell next.js for which dynamic parameter values the page should be pre-generated\nexport const getStaticPaths = async() => {\n\treturn {\n\t\tfallback: false,\n\t\tpaths: [\n\t\t\t{\n\t\t\t\tparams: {meetupId: \"m1\"}\n\t\t\t},\n\t\t\t{\n\t\t\t\tparams: {meetupId: \"m2\"}\n\t\t\t}\n\t\t]\n\t}\n}\n\n\n// Returns props for specific meetup\nexport const getStaticProps = async(context) => {\n\tconst meetupId = context.params.meetupId\n\t\n\tconst client = await MongoClient.connect(\"mongodb+srv://Admin:hesoyam@cluster0.eykfx.mongodb.net/MeetupsProject?retryWrites=true&w=majority\")\n\tconst db = client.db();\n\tconst meetupCollection = db.collection(\"meetups\");\n\t\n\tconst res = await meetupCollection.find({id: meetupId});\n\tconsole.log(res);\n\t\n\t\n// \tRuns on server side\n\tconsole.log(meetupId)\n\t\n\treturn {\n\t\tprops: {\n\t\t\tmeetupData: res\n\t\t}\n\t}\n}\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}