{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/workspace/React/NextJs/CodeAlongProject/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useRouter } from \"next/router\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport Head from \"next/head\";\n\nvar MeetupDetails = function MeetupDetails(props) {\n  _s();\n\n  var router = useRouter();\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 5\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 5\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      img: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 4\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }, _this);\n}; // Tell next.js for which dynamic parameter values the page should be pre-generated\n\n\n_s(MeetupDetails, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/workspace/React/NextJs/CodeAlongProject/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["useRouter","Fragment","MeetupDetail","Head","MeetupDetails","props","router","meetupData","title","description","image","address"],"mappings":";;;;;;AAAA,SAAQA,SAAR,QAAwB,aAAxB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA;;AAC7B,MAAMC,MAAM,GAAGN,SAAS,EAAxB;AAEA,sBACF,QAAC,QAAD;AAAA,4BACC,QAAC,IAAD;AAAA,8BACC;AAAA,kBAAQK,KAAK,CAACE,UAAN,CAAiBC;AAAzB;AAAA;AAAA;AAAA;AAAA,eADD,eAEC;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEH,KAAK,CAACE,UAAN,CAAiBE;AAAnD;AAAA;AAAA;AAAA;AAAA,eAFD;AAAA;AAAA;AAAA;AAAA;AAAA,aADD,eAKC,QAAC,YAAD;AACC,MAAA,GAAG,EAAIJ,KAAK,CAACE,UAAN,CAAiBG,KADzB;AAEC,MAAA,KAAK,EAAIL,KAAK,CAACE,UAAN,CAAiBC,KAF3B;AAGC,MAAA,OAAO,EAAIH,KAAK,CAACE,UAAN,CAAiBI,OAH7B;AAIC,MAAA,WAAW,EAAIN,KAAK,CAACE,UAAN,CAAiBE;AAJjC;AAAA;AAAA;AAAA;AAAA,aALD;AAAA;AAAA;AAAA;AAAA;AAAA,WADE;AAcH,CAjBD,C,CAoBA;;;GApBML,a;UACaJ,S;;;KADbI,a;;AAkEN,eAAeA,aAAf","sourcesContent":["import {useRouter} from \"next/router\"\nimport {Fragment} from \"react\"\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\"\nimport {MongoClient, ObjectId} from \"mongodb\"\nimport Head from \"next/head\"\n\n\nconst MeetupDetails = (props) => {\n    const router = useRouter();\n\n    return(\n\t\t<Fragment>\n\t\t\t<Head>\n\t\t\t\t<title>{props.meetupData.title}</title>\n\t\t\t\t<meta name=\"description\" content={props.meetupData.description}></meta>\n\t\t\t</Head>\n\t\t\t<MeetupDetail \n\t\t\t\timg = {props.meetupData.image}\n\t\t\t\ttitle = {props.meetupData.title}\n\t\t\t\taddress = {props.meetupData.address}\n\t\t\t\tdescription = {props.meetupData.description}\n\t\t\t/>\n\t\t</Fragment>\n    )\n}\n\n\n// Tell next.js for which dynamic parameter values the page should be pre-generated\nexport const getStaticPaths = async() => {\n\t\n\tconst client = await MongoClient.connect(\"mongodb+srv://Admin:hesoyam@cluster0.eykfx.mongodb.net/MeetupsProject?retryWrites=true&w=majority\")\n\tconst db = client.db();\n\tconst meetupCollection = db.collection(\"meetups\");\n\t\n\tconst meetups = await meetupCollection.find({}, {_id: 1}).toArray();\n\t\n\tclient.close();\n\n\t\n\treturn {\n\t\tfallback: false,\n\t\tpaths: meetups.map(meetup => ({params: {meetupId: meetup._id.toString()}}))\n\t}\n}\n\n\n// Returns props for specific meetup\nexport const getStaticProps = async(context) => {\n\tconst meetupId = context.params.meetupId\n\t\n\tconst client = await MongoClient.connect(\"mongodb+srv://Admin:hesoyam@cluster0.eykfx.mongodb.net/MeetupsProject?retryWrites=true&w=majority\")\n\tconst db = client.db();\n\tconst meetupCollection = db.collection(\"meetups\");\n\t\n\tconst selectedMeetup = await meetupCollection.findOne({_id: ObjectId(meetupId)})\n\t\n\tclient.close();\n\n// \tRuns on server side\n\tconsole.log(selectedMeetup)\n\t\n\treturn {\n\t\tprops: {\n\t\t\tmeetupData: {\n\t\t\t\tid: selectedMeetup._id.toString(),\n\t\t\t\ttitle: selectedMeetup.title,\n\t\t\t\timage: selectedMeetup.image,\n\t\t\t\tdescription: selectedMeetup.description\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}