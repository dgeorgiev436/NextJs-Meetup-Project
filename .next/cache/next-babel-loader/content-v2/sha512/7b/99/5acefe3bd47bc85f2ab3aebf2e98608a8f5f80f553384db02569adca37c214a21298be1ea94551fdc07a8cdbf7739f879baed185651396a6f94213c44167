{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/workspace/React/NextJs/CodeAlongProject/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport { useRouter } from \"next/router\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport Head from \"next/head\";\n\nconst MeetupDetails = props => {\n  const router = useRouter();\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      img: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }, this);\n}; // Tell next.js for which dynamic parameter values the page should be pre-generated\n\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(\"mongodb+srv://Admin:hesoyam@cluster0.eykfx.mongodb.net/MeetupsProject?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const meetups = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}; // Returns props for specific meetup\n\nexport const getStaticProps = async context => {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://Admin:hesoyam@cluster0.eykfx.mongodb.net/MeetupsProject?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close(); // \tRuns on server side\n\n  console.log(selectedMeetup);\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n};\nexport default MeetupDetails;","map":{"version":3,"sources":["/workspace/React/NextJs/CodeAlongProject/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["useRouter","Fragment","MeetupDetail","MongoClient","ObjectId","Head","MeetupDetails","props","router","meetupData","title","description","image","address","getStaticPaths","client","connect","db","meetupCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","console","log","id"],"mappings":"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","sourcesContent":["import {useRouter} from \"next/router\"\nimport {Fragment} from \"react\"\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\"\nimport {MongoClient, ObjectId} from \"mongodb\"\nimport Head from \"next/head\"\n\n\nconst MeetupDetails = (props) => {\n    const router = useRouter();\n\n    return(\n\t\t<Fragment>\n\t\t\t<Head>\n\t\t\t\t<title>{props.meetupData.title}</title>\n\t\t\t\t<meta name=\"description\" content={props.meetupData.description}></meta>\n\t\t\t</Head>\n\t\t\t<MeetupDetail \n\t\t\t\timg = {props.meetupData.image}\n\t\t\t\ttitle = {props.meetupData.title}\n\t\t\t\taddress = {props.meetupData.address}\n\t\t\t\tdescription = {props.meetupData.description}\n\t\t\t/>\n\t\t</Fragment>\n    )\n}\n\n\n// Tell next.js for which dynamic parameter values the page should be pre-generated\nexport const getStaticPaths = async() => {\n\t\n\tconst client = await MongoClient.connect(\"mongodb+srv://Admin:hesoyam@cluster0.eykfx.mongodb.net/MeetupsProject?retryWrites=true&w=majority\")\n\tconst db = client.db();\n\tconst meetupCollection = db.collection(\"meetups\");\n\t\n\tconst meetups = await meetupCollection.find({}, {_id: 1}).toArray();\n\t\n\tclient.close();\n\n\t\n\treturn {\n\t\tfallback: false,\n\t\tpaths: meetups.map(meetup => ({params: {meetupId: meetup._id.toString()}}))\n\t}\n}\n\n\n// Returns props for specific meetup\nexport const getStaticProps = async(context) => {\n\tconst meetupId = context.params.meetupId\n\t\n\tconst client = await MongoClient.connect(\"mongodb+srv://Admin:hesoyam@cluster0.eykfx.mongodb.net/MeetupsProject?retryWrites=true&w=majority\")\n\tconst db = client.db();\n\tconst meetupCollection = db.collection(\"meetups\");\n\t\n\tconst selectedMeetup = await meetupCollection.findOne({_id: ObjectId(meetupId)})\n\t\n\tclient.close();\n\n// \tRuns on server side\n\tconsole.log(selectedMeetup)\n\t\n\treturn {\n\t\tprops: {\n\t\t\tmeetupData: {\n\t\t\t\tid: selectedMeetup._id.toString(),\n\t\t\t\ttitle: selectedMeetup.title,\n\t\t\t\timage: selectedMeetup.image,\n\t\t\t\tdescription: selectedMeetup.description\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default MeetupDetails;"]},"metadata":{},"sourceType":"module"}